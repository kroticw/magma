//
// Created by  Денис Давыдов on 22.10.2024.
//

#ifndef MAGMA_H
#define MAGMA_H

#include <iostream>

using namespace std;

class Magma {
  uint32_t *key{};
  uint32_t *round_keys{};
  uint32_t mod = pow(2, 32);
  uint8_t s_block[9][16] = {
      //0,          1,          2,          3,          4,          5,           6,         7,          8,          9,          A,          B,          C,          D,          E,          F
    {0b00000000, 0b00000001, 0b00000010, 0b00000011, 0b00000100, 0b00000101, 0b00000110, 0b00000111, 0b00001000, 0b00001001, 0b00001010, 0b00001011, 0b00001100, 0b00001101, 0b00001110, 0b00001111},
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    {0b00001100, 0b00000100, 0b00000110, 0b00000010, 0b00001010, 0b00000101, 0b00001011, 0b00001001, 0b00001110, 0b00001000, 0b00001101, 0b00000111, 0b00000000, 0b00000011, 0b00001111, 0b00000001},
    {0b00000110, 0b00001000, 0b00000010, 0b00000011, 0b00001001, 0b00001010, 0b00000101, 0b00001100, 0b00000001, 0b00001110, 0b00000100, 0b00000111, 0b00001011, 0b00001101, 0b00000000, 0b00001111},
    {0b00001011, 0b00000011, 0b00000101, 0b00001000, 0b00000010, 0b00001111, 0b00001010, 0b00001101, 0b00001110, 0b00000001, 0b00000111, 0b00000100, 0b00001100, 0b00001001, 0b00000110, 0b00000000},
    {0b00001100, 0b00001000, 0b00000010, 0b00000001, 0b00001101, 0b00000100, 0b00001111, 0b00000110, 0b00000111, 0b00000000, 0b00001010, 0b00000101, 0b00000011, 0b00001110, 0b00001001, 0b00001011},
    {0b00000111, 0b00001111, 0b00000101, 0b00001010, 0b00001000, 0b00000001, 0b00000110, 0b00001101, 0b00000000, 0b00001001, 0b00000011, 0b00001110, 0b00001011, 0b00000100, 0b00000010, 0b00001100},
    {0b00000101, 0b00001101, 0b00001111, 0b00000110, 0b00001001, 0b00000010, 0b00001100, 0b00001010, 0b00001011, 0b00000111, 0b00001000, 0b00000001, 0b00000100, 0b00000011, 0b00001110, 0b00000000},
    {0b00001000, 0b00001110, 0b00000010, 0b00000101, 0b00000110, 0b00001001, 0b00000001, 0b00001100, 0b00001111, 0b00000100, 0b00001011, 0b00000000, 0b00001101, 0b00001010, 0b00000011, 0b00000111},
    {0b00000001, 0b00000111, 0b00001110, 0b00001101, 0b00000000, 0b00000101, 0b00001000, 0b00000011, 0b00000100, 0b00001111, 0b00001010, 0b00000110, 0b00001001, 0b00001100, 0b00001011, 0b00000010},
  };
  public:
    explicit Magma(const uint8_t *key) {
      this->key = new uint32_t[32];
      for (int i = 0; i < 32; i++) {
        this->key[i] = key[i];
      }

      this->round_keys = new uint32_t[32];
      int j = 0;
      for (int i = 0; i < 8; i++) {
        j = i*5;
        this->round_keys[i] = this->round_keys[i + 8] = this->round_keys[i + 16] = this->round_keys[31 - i] =
          key[j] | (key[j + 1] << 8) | (key[j + 2] << 16) | (key[j + 3] << 24) | (key[j + 4] << 32);
      }
    };

    uint32_t s_box_permutation(uint32_t x) {
      // uint8_t a1, a2, a3, a4;
      // a1 = x & 0b00000000000000000000000011111111;
      // a2 = (x >> 8) & 0b00000000000000000000000011111111;
      // a3 = (x >> 16) & 0b00000000000000000000000011111111;
      // a4 = (x >> 24) & 0b00000000000000000000000011111111;
      // cout << "x " << std::bitset<sizeof(x) * CHAR_BIT>(x) << std::endl;
      // cout << "a1 " << std::bitset<sizeof(a1) * CHAR_BIT>(a1) << std::endl;
      // cout << "a2 " << std::bitset<sizeof(a2) * CHAR_BIT>(a2) << std::endl;
      // cout << "a3 " << std::bitset<sizeof(a3) * CHAR_BIT>(a3) << std::endl;
      // cout << "a4 " << std::bitset<sizeof(a4) * CHAR_BIT>(a4) << std::endl;

      int r = 0;
      uint8_t a;
      for (int i = 0; i < 4; i++) {
        a = (x >> r) & 0b0000000000000000000000001111111;
        uint8_t a1, a2;
        a1 = a >> 4;
        a2 = a & 0b00001111;
        int j = 0;
        while (a1 != this->s_block[i+1][j]) {}
        while (a2 != this->s_block[i+2][j]) {}
        r += 8;
      }

      uint32_t result = 0;
    }

    int encrypt_block(uint32_t *str) {
      //std::cout << "21 " << std::bitset<sizeof(str[0]) * CHAR_BIT>(str[0]) << std::endl;
      uint32_t temp = 0;
      for (int i = 0; i < 32; i++) {
        str[0] = (str[0] + this->round_keys[i]) % mod;
        str[0] = s_box_permutation(str[0]);
      }
      return 0;
    }

    int decrypt_block() {
      return 0;
    }
};

#endif //MAGMA_H
